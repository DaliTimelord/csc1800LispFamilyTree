;;;; -*- Mode: Lisp; -*- 


(defstruct person 

  (parents nil)
  (children nil)
  (spouses nil)
  (name nil))


(defun storeperson (symbol-name struct family-tree)

  (if (not (gethash symbol-name family-tree))
      (setf (gethash symbol-name family-tree) struct))

  family-tree)



(defun personstruct (symbol-name family-tree)

  "Returns a structure of type person corresponding to the key SYMBOL-NAME in the hashtable FAMILY-TREE. If there is no one in the tree with the name in SYMBOL-NAME, returns NIL."

  (gethash symbol-name family-tree nil))

(defun sort-list (list)
  (sort list #'STRING-LESSP :key #'(lambda(x) (format nil "~A" x))))

(defun print-list (list)
  (print (format nil "~{~A~&~}" (sort-list list))))

(defun ancestors (symbol tree)

  "Returns a list of symbol-names of all the ancestors of P in TREE. Does not remove any duplicated names!"

   (let ((parent1 (personstruct (first (person-parents (personstruct symbol tree))) tree))

         (parent2 (personstruct (second (person-parents (personstruct symbol tree))) tree)))

     (when parent1

         (remove-duplicates (append (list (person-name parent1) (person-name parent2))

                 (ancestors (person-name parent1) tree)

                 (ancestors (person-name parent2) tree))))))

(defun siblings (symbol tree)
  (if (person-parents (personstruct symbol tree))
      (progn
        (setf p1 (personstruct (first (person-parents (personstruct symbol tree))) tree))
        (setf p2 (personstruct (second (person-parents (personstruct symbol tree))) tree))
        (remove symbol (remove-duplicates (append (person-children p1) (person-children p2)))))))

(defun spouses (symbol tree)
  (person-spouses (personstruct symbol tree)))

(defun children (symbol tree)
  (person-children (personstruct symbol tree)))

(defun cousins (symbol tree)
  (setf list1 (ancestors symbol tree))
  (setf cousin-list ())
  (loop for p2 being the hash-values of tree
        do (progn
             (setf list2 (ancestors (person-name p2) tree))
             (cond ((and (not (member (person-name p2) list1))
                         (not (member symbol list2))
                         (not (eq symbol (person-name p2)))
                         (intersection list1 list2))
                    (setf cousin-list  (append cousin-list (list (person-name p2))))))))
  (setf cousin-list cousin-list))

(defun unrelated (symbol tree)
  (setf related (append (ancestors symbol tree)
                        (cousins symbol tree)
                        (children symbol tree)))
  (setf unrelated ())
  (loop for p2 being the hash-values of tree
        do (progn
             (setf list2 (ancestors (person-name p2) tree))
             (cond ((and (not (member (person-name p2) related))
                         (not (member symbol list2)))
                    (setf unrelated (append unrelated (list (person-name p2))))))))
  (setf unrelated unrelated))


(defun family ()

  "This is the top-level function for the whole Lisp program."
  (setf tree (make-hash-table :size 1000 :test #'equal))
  (loop for line = (read *STANDARD-INPUT* nil nil)
        while line do (progn
                        (cond ((string= (first line) "W")
                               (print (format nil "~{~A ~}" line))
                               (cond ((not (personstruct (third line) tree))
                                      (setf list ())
                                      (if (string= (second line) "UNRELATED")
                                          (loop for p2 being the hash-values of tree
                                                do (setf list (append list (list (person-name p2))))))
                                      (setf list (remove-duplicates (append list (list (third line)))))
                                      (print-list list))
                                     ((string= (second line) "SIBLING")
                                      (print-list (siblings (third line) tree)))
                                     ((string= (second line) "ANCESTOR")
                                      (print-list (ancestors (third line) tree)))
                                     ((string= (second line) "SPOUSE")
                                      (print-list (spouses (third line) tree)))
                                     ((string= (second line) "CHILD")
                                      (print-list (children (third line) tree)))
                                     ((string= (second line) "COUSIN")
                                      (print-list (cousins (third line) tree)))
                                     ((string= (second line) "UNRELATED")
                                      (print-list (unrelated (third line) tree)))))
                              ((string= (first line) "X")
                               (print (format nil "~{~A ~}" line))
                               (cond ((or (not (personstruct (second line) tree))
                                          (not (personstruct (fourth line) tree)))
                                      (if (string= (third line) "UNRELATED")
                                          (print "Yes")
                                        (print "No")))
                                     ((string= (third line) "SIBLING")
                                      (if (member (second line) (siblings (fourth line) tree))
                                          (print "Yes")
                                        (print "No")))
                                     ((string= (third line) "ANCESTOR")
                                      (if (member (second line) (ancestors (fourth line) tree))
                                          (print "Yes")
                                        (print "No")))
                                     ((string= (third line) "SPOUSE")
                                      (if (member (second line) (spouses (fourth line) tree))
                                          (print "Yes")
                                        (print "No")))
                                     ((string= (third line) "CHILD")
                                      (if (member (second line) (children (fourth line) tree))
                                          (print "Yes")
                                        (print "No")))
                                     ((string= (third line) "COUSIN")
                                      (if (member (second line) (cousins (fourth line) tree))
                                          (print "Yes")
                                        (print "No")))
                                     ((string= (third line) "UNRELATED")
                                      (if (member (second line) (unrelated (fourth line) tree))
                                          (print "Yes")
                                        (print "No"))))
                               (print ""))
                              ((string= (first line) "E")
                               (if (personstruct (second line) tree)
                                   (setf p1 (personstruct (second line) tree))
                                 (progn (setf p1 (make-person :name (second line)))
                                   (storeperson (person-name p1) p1 tree)))
                               (if (personstruct (third line) tree)
                                   (setf p2 (personstruct (third line) tree))
                                 (progn (setf p2 (make-person :name (third line)))
                                   (storeperson (person-name p2) p2 tree)))
                               (cond ((fourth line)
                                      (setf p3 (make-person :name (fourth line)
                                                            :parents (list (person-name p1) (person-name p2))))
                                      (storeperson (person-name p3) p3 tree)
                                      (setf (person-children p1) (append (person-children p1) (list (person-name p3))))
                                      (setf (person-children p2) (append (person-children p2) (list (person-name p3))))))

                               (cond ((not (member (person-name p2) (person-spouses p1)))
                                      (setf (person-spouses p1) (append (person-spouses p1) (list (person-name p2))))
                                      (setf (person-spouses p2) (append (person-spouses p2) (list (person-name p2)))))))))))

(let ((*STANDARD-INPUT* (open "C:\\Users\\Velociraptor 2.0\\Desktop\\lisp\\test.txt" :direction :input)))
  (family))