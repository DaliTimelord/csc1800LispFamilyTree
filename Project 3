;;;; -*- Mode: Lisp; -*- 


(defstruct person 

  (parents nil)
  (children nil)
  (spouses nil)
  (name nil))


(defun storeperson (symbol-name struct family-tree)

  (if (not (gethash symbol-name family-tree))
      (setf (gethash symbol-name family-tree) struct))

  family-tree)



(defun personstruct (symbol-name family-tree)

  "Returns a structure of type person corresponding to the key SYMBOL-NAME in the hashtable FAMILY-TREE. If there is no one in the tree with the name in SYMBOL-NAME, returns NIL."

  (gethash symbol-name family-tree nil))



(defun ancestors (p tree)

  "Returns a list of symbol-names of all the ancestors of P in TREE. Does not remove any duplicated names!"

   (let ((parent1 (personstruct (first (person-parents p)) tree))

         (parent2 (personstruct (second (person-parents p)) tree)))

     (when parent1

         (append (list (person-name parent1) (person-name parent2))

                 (ancestors parent1 tree)

                 (ancestors parent2 tree)))))

(defun read-words (line)
  (loop while (peek-char nil line nil nil)
        collect (read line)))

(defun family ()

  "This is the top-level function for the whole Lisp program."
  (setf tree (make-hash-table :size 1000 :test #'equal))
  (loop for line = (read-line *STANDARD-INPUT* nil nil)
        while line do (progn (setf words (split-sequence " " line))
                        (cond ((string= (first words) "W") 
                               (print "W"))
                              ((string= (first words) "X")
                               (print "X"))
                              ((string= (first words) "E")
                               (print "E")))))

  ;;(setf ((tree (make-hash-table :size 1000 :test #'equal)))
      ;;(loop for line = (read-line *STANDARD-INPUT* nil nil)
            ;;while line do (
            ;;while line do (cond ((char-equal (char line 0) #\E)
                                ;; ())
                                ;;((char-equal (char line 0) #\X) ())
                                ;;((char-equal (char line 0) #\W) ()))
)

(let ((*STANDARD-INPUT* (open "C:\\Users\\Velociraptor 2.0\\Desktop\\lisp\\test.txt" :direction :input)))
  (family))
